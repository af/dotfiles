# Tmux config, adapted from [1]
# For a quick refresher on some of the built-in commands, see [2]
#
# Misc tips to remember:
# * `$tmuxPrefix z` toggles a pane's "zoom" (between its current place and the full window)
# * Use `bind-key` with `-n` to create a binding that doesn't use the prefix
# * mirror an existing session with `tmux new-session -t <base session> -s <new session>`
#
# [1] https://github.com/chrishunt/dot-files/blob/master/.tmux.conf
# [2] http://wiki.gentoo.org/wiki/Tmux


###########################
#  Configuration
###########################

set -g default-terminal "screen-256color"   # use 256 term for pretty colors
set -g history-limit 5000                   # increase scroll-back history
setw -g mode-keys vi                        # use vim key bindings

setw -g mouse on                            # enable mouse interactions

set -sg escape-time 1                       # decrease command delay (for vim, time is in ms)
set -g repeat-time 1000                     # increase repeat time for repeatable commands
set -g base-index 1                         # start window index at 1
setw -g pane-base-index 1                   # start pane index at 1
set -g renumber-windows on                  # re-number windows when one is closed
set -g allow-rename off                     # prevent window renaming
setw -g aggressive-resize on

# don't highlight window when it has new activity
setw -g monitor-activity off
set -g visual-activity off


###########################
#  Key Bindings
###########################

# tmux prefix
# Note: I use <C-;> as my prefix binding. Since C-; isn't a valid control char,
# it's remapped to Home using Hammerspoon
unbind C-b
set -g prefix 'Home'
bind -n End select-pane -t :.+     # Cycle through panes.
bind Home last-pane                # Double tapping the prefix goes to last pane

bind h list-keys            # show key bindings

# paste
bind ^B copy-mode           # For scrolling back (press ^B again to go back a page)
unbind C-p
bind C-p paste-buffer

# window splitting (use vim-inspired shortcuts)
bind-key c command-prompt -p "Name of new window: " "new-window -n '%%'"
unbind %
unbind '"'
unbind ^S
bind ^V split-window -h -c "#{pane_current_path}"
bind ^S split-window -v -c "#{pane_current_path}"

# moving windows
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Session initialization (opening several named windows w/ one command):
# It references a tmux script file, which might look like this:
#   new-window -n "works" -c ~/code/work
#   new-window -n "irc" -c ~/code/temp
#   kill-window -t 1
bind i source-file ~/dotfiles/init-tmux-session     # Note: this file is not saved in git

# resize panes
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# switching between panes
bind ^H select-pane -L
bind ^H select-pane -L
bind ^J select-pane -D
bind ^K select-pane -U
bind ^L select-pane -R

# Experimental binding to re-run the last command in the right pane, without
# leaving the current pane
bind -n ^Y send-keys -t right C-c Up Enter

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"


###########################
# OS X copy/paste integration
###########################

# Enable pbcopy and pbpaste (via reattach-to-user-namespace, from homebrew)
# see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/blob/master/README.md
#
# This also enables copying with 'enter' or 'y', sending text to OS X's clipboard.
# For more on this see http://goo.gl/2Bfn8
set-option -g default-command "reattach-to-user-namespace -l zsh"
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
bind-key -t vi-copy v begin-selection   # create 'v' alias for selecting text


###########################
# Status Bar
###########################

set -g status-interval 30               # set refresh interval for status bar
set -g status-justify left              # center the status bar
set -g status-left-length 40

# show session, window, pane in left status bar
set -g status-left '#[fg=green]#S#[fg=blue] #I:#P#[default]'

# show hostname, date, time, and battery in right status bar
set-option -g status-right '#[fg=green]#H#[default] %m/%d/%y %I:%M\
 #[fg=red]#(battery discharging)#[default]#(battery charging)'


###########################
# Colors
###########################

# color status bar
set -g status-bg colour235
set -g status-fg white

# highlight current window name in status bar
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-bg green

# inactive/active window styles
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=colour250,bg=colour234'
set -g focus-events on          # Needed for vim-diminactive

# set color of active pane
set -g pane-border-fg colour235
set -g pane-border-bg black
set -g pane-active-border-fg green
set -g pane-active-border-bg black


# Tmux-resurrect
# <prefix> <s> to save
# <prefix> <C-r> to restore
# See https://github.com/tmux-plugins/tmux-resurrect
set -g @resurrect-save 's'                  # ^s already taken for splitting
set -g @resurrect-strategy-vim 'session'    # for vim
set -g @resurrect-strategy-nvim 'session'   # for neovim
set -g @resurrect-processes 'vim nvim tig psql man less top'
run-shell ~/dotfiles/tmux/tmux-resurrect/resurrect.tmux

# Tmux-continuum (automatically save the environment on an interval)
run-shell ~/dotfiles/tmux/tmux-continuum/continuum.tmux
set -g @continuum-restore 'on'          # Auto-restore on startup (doesn't seem to work?)
set -g @continuum-save-interval '10'    # Save interval in minutes
