" General Notes
" * see ":h normal-index" or ":h insert-index" for a list of built-in mappings
" * see ":verbose nmap <C-j>" (for example) for maps setup by plugins or .vimrc

set nocompatible            " we're using Vim, not Vi

"===============================================================================
" NeoBundle setup
"===============================================================================
" Besides the bundles to install, assume that everything until the end of this
" section is required for NeoBundle's setup process.
if has('vim_starting')
   set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" vim plugins, managed by NeoBundle
NeoBundle 'kien/ctrlp.vim', 'b5d3fe66'
NeoBundle 'tpope/vim-fugitive', '124550'
NeoBundle 'airblade/vim-gitgutter', '878c3422'
NeoBundle 'bling/vim-airline', 'aef500c426'
NeoBundle 'tpope/vim-sleuth', '039e2cd'
NeoBundle 'tomtom/tcomment_vim', '3d0a9975'
NeoBundle 'tpope/vim-surround', '42e9b46e'
NeoBundle 'tpope/vim-vinegar', 'ac893960c'
NeoBundle 'tommcdo/vim-exchange', 'b82a774'
NeoBundle 'sheerun/vim-polyglot', 'e961fa8'     " syntax highlighting for many languages
NeoBundle 'vimwiki/vimwiki', '2c03d8'
NeoBundle 'justinmk/vim-sneak', '9eb89e43'

" Javascript and HTML-related plugins
NeoBundleLazy '29decibel/vim-stringify', '614eb0c', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'tristen/vim-sparkup', {'autoload':{'filetypes':['html', 'javascript']}}
NeoBundleLazy 'tpope/vim-ragtag', {'autoload':{'filetypes':['html']}}   " Use <C-x>/ to close last open html tag

" Unite.vim and related plugs
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'sgur/unite-git_grep'

" Ultisnips (private snippets are stored in this repo)
NeoBundle 'UltiSnips', '3.0'

" theme/syntax related plugins:
NeoBundle 'scrooloose/syntastic', 'f92741d3'
NeoBundle 'colorizer', 'aae6b518'

" Colour schemes:
NeoBundle 'tomasr/molokai', 'e7bcec7573'        " default
NeoBundle 'junegunn/seoul256.vim', '340817d'    " softer, lower contrast

" plugins for colorscheme dev (not tested yet):
" https://github.com/shawncplus/Vim-toCterm
" https://github.com/guns/xterm-color-table.vim

filetype plugin indent on
NeoBundleCheck
"===============================================================================
" (End of NeoBundle setup)
"===============================================================================



"===============================================================================
" General Vim settings
"===============================================================================
set visualbell
set history=500             " longer command history (default=20)
let mapleader = " "         " <leader> is our personal modifier key
set noswapfile              " Disable swap files
"set directory=~/.vim/swp    " where the .swp files go (if enabled)

" File/buffer settings
autocmd BufWinEnter,BufNewFile * silent tabo    " Ensure only one tab is open
set hidden                  " TODO: revisit this. Hides instead of unloads buffers
set autoread                " reload files on changes (ie. changing git branches)
set encoding=utf-8
set scrolloff=3             " # of lines always shown above/below the cursor

" Indenting & white space
set expandtab
set tabstop=4 shiftwidth=4 softtabstop=4
set autoindent
set list listchars=tab:›\ ,trail:·          " mark trailing white space
"set list listchars=tab:›\ ,trail:·,eol:¬   " mark trailing white space (with eol)


"===============================================================================
" Display/window settings
"===============================================================================
syntax on
set bg=dark
set number                  " line number gutter
set ruler                   " line numbers at bottom of page
set showcmd
set title
set wildmenu
set wildignore=.svn,.git,.gitignore,*.pyc,*.so,*.swp,*.jpg,*.png,*.gif,node_modules,_site
set laststatus=2            " Always show a status line for lowest window in a split
set cursorline              " highlight the full line that the cursor is currently on
set colorcolumn=80,100      " Highlight these columns with a different bg


"===============================================================================
" Searching & Replacing
"===============================================================================
set ignorecase
set smartcase               " override 'ignorecase' if search term has upper case chars
set incsearch               " incremental search
set showmatch
set hlsearch                " highlight searched items
set gdefault                " use 'global' mode by default for substitutions

" Clear search highlighting with ' ,', use python-style search regexes:
nnoremap <leader>, :noh<cr>
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v


"===============================================================================
" Line wrapping
"===============================================================================
set wrap
set textwidth=99
set formatoptions=qrn1
nnoremap j gj
nnoremap k gk


"===============================================================================
" Colorscheme
"===============================================================================
color molokai

" Molokai overrides for commit preview highlighting (eg. after "git commit"):
hi link diffAdded Function
hi diffRemoved guifg=#960050 ctermfg=162
hi link diffLine Define
hi link diffFile Define
hi link diffSubname Constant

" MacVim/GVIM and 256-colour term overrides
if has('gui_running')
    set guifont=Monaco:h14      " gvim/mvim: Bump up the default fontsize
elseif $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256            " Richer colours if our terminal can handle it.
endif

" Show syntax highlighting groups for word under cursor with <leader>s
" From Vimcasts #25: http://vimcasts.org/episodes/creating-colorschemes-for-vim/
nnoremap <leader>h :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


"===============================================================================
" Plugin customization
"===============================================================================

" Enable the built-in matchit plugin. This enhances % for xml tags and other stuff
runtime macros/matchit.vim

" Ctrl-P
nnoremap <C-t> :CtrlPBuffer<CR>             " Search active buffers
let g:ctrlp_map = '<leader><leader>'    " Search in current directory
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multiple_files = 'i'
let g:ctrlp_clear_cache_on_exit = 1

" gitgutter
" OS X's default vim doesn't have signs support, so disable it for that editor.
if has('signs')
    map! <C-j> <esc>:GitGutterNextHunk<CR>
    map <C-j> :GitGutterNextHunk<CR>
    map! <C-k> <esc>:GitGutterPrevHunk<CR>
    map <C-k> :GitGutterPrevHunk<CR>
else
    let g:gitgutter_enabled = 0
endif

" Syntastic display customizations:
" TODO: update colors so they work in console vim also
let syntastic_mode_map = { 'passive_filetypes': ['html'] }  " disable html checking by default
let g:syntastic_error_symbol = '!!'
let g:syntastic_warning_symbol = '!!'
hi SyntasticErrorSign guifg=#ff0000
hi SyntasticWarningSign guifg=#ff0000

" Syntastic checker config:
let g:syntastic_python_checkers=['pyflakes']

" vim-airline:
" Note: the following symbols require a patched font.
" For Monaco, I used https://github.com/fromonesrc/monaco-powerline-vim
let g:airline_left_sep          = '⮀'
let g:airline_left_alt_sep      = '⮁'
let g:airline_right_sep         = '⮂'
let g:airline_right_alt_sep     = '⮃'
let g:airline_branch_prefix     = '⭠'
let g:airline_readonly_symbol   = '⭤'
let g:airline_linecolumn_prefix = '⭡'
let g:airline_theme = 'murmur'
let g:airline#extensions#tabline#enabled = 1    " Tab line at top of window

" Colorizer
nnoremap <leader><F2> :ColorToggle<CR>

" Sparkup
let g:sparkupExecuteMapping = '<C-e>'       " The default mapping
let g:sparkupDoubleQuote = 1                " Use double quotes for html attrs

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetDirectories = ['personal_snippets']
let g:UltiSnipsSnippetsDir = '~/.vim/personal_snippets'
nnoremap <leader>s :UltiSnipsEdit<CR>

" vim-stringify
map <leader>' :call Stringify()<CR>

" Unite.vim
let g:unite_source_history_yank_enable = 1
let g:unite_enable_short_source_names = 1
let g:unite_enable_start_insert = 1
let g:unite_split_rule = 'botright'
nnoremap <leader>t :<C-u>Unite -buffer-name=unite file_rec<cr>
nnoremap <leader>f :<C-u>Unite -buffer-name=unite file<cr>
nnoremap <leader>r :<C-u>Unite -buffer-name=unite file_mru<cr>
nnoremap <leader>o :<C-u>Unite -buffer-name=unite outline<cr>
nnoremap <leader>g :<C-u>Unite -buffer-name=unite vcs_grep<cr>
nnoremap <leader>e :<C-u>Unite -buffer-name=unite buffer<cr>
nnoremap <leader>y :<C-u>Unite -buffer-name=unite history/yank<cr>
autocmd filetype unite imap <buffer> <C-u> <Plug>(unite_exit)
autocmd filetype unite imap <buffer> <C-j> <Plug>(unite_select_next_line)
autocmd filetype unite imap <buffer> <C-k> <Plug>(unite_select_previous_line)
autocmd BufLeave \[unite\]* set bufhidden=wipe  " From https://github.com/Shougo/unite.vim/issues/278

" VimWiki
let g:vimwiki_ext2syntax = {}
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md',
                    \  'diary_rel_path': 'journal/', 'diary_index': 'index',
                    \  'diary_header': 'Journal', 'diary_sort': 'asc'},
                    \ {'path': '~/code/reelhouse/wiki/', 'syntax': 'markdown', 'ext': '.md'}]

"===============================================================================
" Key Bindings: Moving around
"===============================================================================

" (built-in)
" <C-o> - move the cursor position back in the jump list
" <C-i> - move the cursor position forward in the jump list
" g;    - move back in the change list
" g,    - move forward in the change list
" gi    - move to the last insert, and re-enter insert mode
" {     - move back one paragraph
" }     - move forward one paragraph

" Navigating between buffers:
map! <C-h> <esc>:bp<CR>
map <C-h> :bp<CR>
map! <C-l> <esc>:bn<CR>
map <C-l> :bn<CR>
nnoremap <silent> <C-u> :bd<CR>

" Save current file every time we leave insert mode or hit <esc>:
" Note that the autocmd repeats the mapping each time we leave insert mode,
" this doesn't seem to be a problem in practice.
"
" Alternative approaches (which didn't seem to work as well for my needs):
" set autowriteall   (couldn't get this to work)
" :au FocusLost * :wa
inoremap <esc> <esc>:w<CR>
autocmd InsertLeave * nnoremap <esc> <esc>:w<CR>

" Swap ` and ' for mark jumping:
nnoremap ' `
nnoremap ` '

" Global mark conventions
" Uppercase marks persist between sessions, so they're useful for accessing
" common files quickly. By convention, use the following global marks:
"
" V     - vimrc
" Z     - zshrc
" J     - jshintrc
"
" ProTip: After opening a file with a global mark, you can change vim's cwd to
" the file's location with ":cd %:h"


"===============================================================================
" Key Bindings: Misc
"===============================================================================
" Use ':w!!' to save a root-owned file using sudo:
cmap w!! w !sudo tee % >/dev/null

set foldlevelstart=10

" pastetoggle didn't work for some reason, but this does:
nnoremap <leader>c :set invpaste paste?<CR>

" copy/paste with system clipboard:
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P


"===============================================================================
" Filetype-specific settings
"===============================================================================
" filetype detection for syntax highlighting
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.mustache set filetype=mustache
autocmd FileType mustache set ft=html.mustache

" JSON files: set filetype to json for syntastic, use js highlighting:
au BufRead,BufNewFile *.json set filetype=json
au BufRead,BufNewFile *.json setlocal syntax=javascript


"===============================================================================
" Misc
"===============================================================================

" Vim supports encryption! Just enter :X before saving.
" But we need to update the encryption type to a more secure one.
" See http://usevim.com/2013/11/01/vim-encryption/
set cryptmethod=blowfish

" Set vim's cwd to the closest ancestor dir containing a .git directory
" using "git rev-parse --show-toplevel"
function! MoveToGitDir()
  let filePath = fnamemodify(bufname("%"), ':p:h')
  exe 'cd' fnameescape(filePath)
  let repoPath = system("git rev-parse --show-toplevel")
  let repoPath = substitute(repoPath, '\n$', '', '')    " Remove newline from system() output
  exe 'cd' fnameescape(repoPath)
  echo 'Changed dir to ' . repoPath
endfunc
nnoremap <leader>d :call MoveToGitDir()<CR>
