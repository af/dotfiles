priority -50

# Note: see snippet docs here:
# https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
#
# w - trigger on word boundary
# b - trigger only at beginning of line
#
# TODO
# if/elseif/else (with/without braces)
# See this file for further ideas:
# https://github.com/honza/vim-snippets/blob/master/UltiSnips/javascript.snippets

snippet cl "console.log" w
console.log($1)
endsnippet

snippet c "const" b
const ${1:$name} = ${0}
endsnippet

snippet d "debugger" b
debugger
endsnippet

snippet jd "jsdoc" b
/**
* $3
* @return {${1:type}} - $2
*/
endsnippet

snippet ja "jsdoc arg" w
@arg {${1:type}} ${2:name} - 
endsnippet

snippet jr "jsdoc return" b
@return {${1:type}} - 
endsnippet

snippet jt "jsdoc throws" b
@throws {${1:type}}
endsnippet

snippet r "require" b
const ${1:$name} = require('${2:$1}');
endsnippet

snippet oi "object item" b
${1:$key}: {
	$2
},$0
endsnippet

snippet th "throw" b
throw new ${1:Error($2)}
endsnippet

snippet for "for loop" b
for (const i = 0; i < $1; i++) {
	$0
}
endsnippet

snippet sw "switch" b
switch ($1) {
	case $2:
		$3
		break
	$0
}
endsnippet

snippet ar "arrow function" w
($1) => {$2}
endsnippet

snippet me "class method" b
${1:methodName}() {
	$0
},
endsnippet



#===================
# Testing snippets
#===================

snippet t "painless test" w
test('$1', () => {
	$2
});
endsnippet

snippet desc "mocha describe" w
describe('$1', function($2) {
	$0
});
endsnippet

snippet it "mocha it" w
it('$1', function($2) {
	$0
});
endsnippet

snippet before "mocha before" w
before(function($1) {
	$0
});
endsnippet

snippet after "mocha after" w
after(function($1) {
	$0
});
endsnippet

snippet beforeEach "mocha beforeEach" w
beforeEach(function($1) {
	$0
});
endsnippet

snippet afterEach "mocha afterEach" w
afterEach(function($1) {
	$0
});
endsnippet

snippet ase "assert.strictEqual()" w
assert.strictEqual($1,$2);
endsnippet

snippet aok "assert.ok()" w
assert.ok($1);
endsnippet


# React
snippet fc "React functional component" b
const $1 = ({ $2 }) => {
	return $3
}

$1.propTypes = {

}
endsnippet

snippet cc "React class component" b
class $1 extends React.Component {
	render() {
		return $2
	}
}

$1.propTypes = {

}
endsnippet

snippet sc "React class component w/ state" b
class ${1:MyComponent} extends React.Component {
	constructor(props) {
		super(props)
		this.state = {
			$3
		}
	}

	render() {
		return $2
	}
}

$1.propTypes = {

}
endsnippet
